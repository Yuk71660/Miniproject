<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.miniproject.mapper.hboardmapper">
   <!-- 게시글 전체 리스트 -->
   <select id="getEntireHBoard"
      resultType="com.miniproject.model.HBoard">
      select * from hboard
      <choose>
         <when test="searchType != null">
            <choose>
               <when test="searchType == 'title'">
                  where title like #{searchWord}
               </when>
               <when test="searchType == 'writer'">
                  where writer like #{searchWord}
               </when>
               <when test="searchType == 'content'">
                  where content like #{searchWord}
               </when>
            </choose>
         </when>
      </choose>
      order by ref desc, refOrder asc limit #{startRowIndex}, #{rowCntPerPage}
   </select>

   <!-- 게시글 저장 -->
   <insert id="saveHBoard" useGeneratedKeys="true"
      keyProperty="boardNo">
      insert into hboard(title, content, writer)
      values(#{title}, #{content}, #{writer})
   </insert>

   <!-- 게시글 파일 업로드 쿼리문 -->
   <insert id="saveUpFile">
      insert into boardupfiles(originalFileName,
      newFileName, thumbFileName, fileType, ext, size, base64Image, boardNo)
      values(#{originalFileName}, #{newFileName}, #{thumbFileName},
      #{fileType},#{ext},#{size}, #{base64Image}, #{boardNo})
   </insert>

   <!-- 게시글 상세 조회 쿼리문 (조인문) -->
   <select id="getBoardDetailInfoByBoardNo"
      resultMap="boardDetailInfoMap">
      select h.*, f.*, m.userId, m.userName, m.email, m.userImg
      from hboard h left outer join boardupfiles f
      on h.boardNo = f.boardNo
      left outer join member m
      on h.writer = m.userId
      where h.boardNo =
      #{boardNo}
   </select>

   <!-- 게시글 상세 조회 쿼리문의 결과를 매핑하는 resultMap -->
   <resultMap type="com.miniproject.model.BoardDetailInfo"
      id="boardDetailInfoMap">
      <result column="boardNo" property="boardNo" javaType="int" />
      <result column="title" property="title" javaType="String" />
      <result column="content" property="content" javaType="String" />
      <result column="writer" property="writer" javaType="String" />
      <result column="postDate" property="postDate"
         javaType="java.sql.Timestamp" />
      <result column="readCount" property="readCount" javaType="int" />
      <result column="ref" property="ref" javaType="int" />
      <result column="step" property="step" javaType="int" />
      <result column="refOrder" property="refOrder" javaType="int" />
      <result column="isDelete" property="isDelete" javaType="String" />

      <result column="userId" property="userId" javaType="String" />
      <result column="userName" property="userName" javaType="String" />
      <result column="email" property="email" javaType="String" />
      <result column="userImg" property="userImg" javaType="String" />

      <collection property="fileList"
         ofType="com.miniproject.model.BoardUpFilesVODTO"
         javaType="java.util.ArrayList">
         <result column="boardUpFileNo" property="boardUpFileNo"
            javaType="int" />
         <result column="originalFileName" property="originalFileName"
            javaType="String" />
         <result column="newFileName" property="newFileName"
            javaType="String" />
         <result column="thumbFileName" property="thumbFileName"
            javaType="String" />
         <result column="fileType" property="fileType"
            javaType="String" />
         <result column="ext" property="ext" javaType="String" />
         <result column="size" property="size" javaType="long" />
         <result column="base64Image" property="base64Image"
            javaType="String" />
         <result column="boardNo" property="boardNo" javaType="int" />
      </collection>
   </resultMap>

   <!-- ? ip주소를 가진 유저가 ?번글을 24시간 이내에 조회한 기록이 있는지 없는지 체크 하는 쿼리문 -->
   <select id="checkHourReadLogByBoardNo" resultType="int">
      select
      ifnull(timestampdiff(hour,
      (select max(readWhen) from boardreadlog
      where
      readWho = #{readWho} and readBoardNo
      = #{boardNo}), now()), -1) as
      timediff
   </select>

   <!-- 조회수 증가 쿼리문 -->
   <update id="updateReadCount">
      update hboard
      set readCount = readCount + 1
      where
      boardNo = #{boardNo}
   </update>

   <!-- 게시글 조회 기록 insert -->
   <insert id="insertBoardReadLog">
      insert into boardreadlog(readWho, readBoardNo)
      values(#{readWho}, #{boardNo})
   </insert>

   <!-- 게시글이 insert된후 useGeneratedKeys속성에 의해 얻어진 boardNo를 ref 컬럼에 update -->
   <update id="updateRefByBoardNo">
      update hboard
      set ref = #{boardNo}
      where boardNo =
      #{boardNo}
   </update>

   <!-- updateRef -->
   <update id="updateRefThatWrittenReply">
      update hboard
      set refOrder = refOrder + 1
      where ref =
      #{ref} and refOrder > #{refOrder}
   </update>

   <!-- 답글을 저장하는 -->
   <insert id="insertReply">
      insert into hboard(title, content, writer, ref, step,
      refOrder)
      values (#{title}, #{content}, #{writer}, #{ref}, #{step},
      #{refOrder})
   </insert>

   <select id="getWriterByBoardNo" resultType="string">
      select writer from
      hboard where boardNo = #{boardNo}
   </select>

   <update id="modifyBoard">
      update hboard
      set title = #{title} ,content =
      #{content}
      where boardNo = #{boardNo}
   </update>

   <delete id="removeBoardUpFile">
      delete from boardupfiles where boardUpFileNo =
      #{boardUpFileNo}
   </delete>

   <delete id="removeBoardUpFileByBoardNo">
      delete from boardupfiles
      where boardNo = #{boardNo}
   </delete>

   <update id="removeBoardProcess">
      update hboard
      set title = '삭제된 글입니다', content = null,
      writer = null, isDelete = 'Y'
      where boardNo = #{boardNo}
   </update>

   <select id="getTotalCountRow" resultType="int">
      select count(*) from
      hboard
   </select>

   <select id="getSearchResultCountRow" resultType="int">
      select count(*) from hboard
      <choose>
         <when test="searchType == 'title'">
            where title like #{searchWord}
         </when>
         <when test="searchType == 'writer'">
            where writer like #{searchWord}
         </when>
         <when test="searchType == 'content'">
            where content like #{searchWord}
         </when>
      </choose>
   </select>
</mapper>